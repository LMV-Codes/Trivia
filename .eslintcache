[{"/home/lmv/Desktop/coding/quizapp/src/App.tsx":"1","/home/lmv/Desktop/coding/quizapp/src/pages/Home.tsx":"2","/home/lmv/Desktop/coding/quizapp/src/components/Navbar.tsx":"3","/home/lmv/Desktop/coding/quizapp/src/index.tsx":"4","/home/lmv/Desktop/coding/quizapp/src/components/Footer.tsx":"5","/home/lmv/Desktop/coding/quizapp/src/reportWebVitals.ts":"6","/home/lmv/Desktop/coding/quizapp/src/components/QuestionRandomizer.tsx":"7","/home/lmv/Desktop/coding/quizapp/src/components/TriviaParameterChoice.tsx":"8","/home/lmv/Desktop/coding/quizapp/src/components/TriviaQuestions.tsx":"9"},{"size":487,"mtime":1610489636409,"results":"10","hashOfConfig":"11"},{"size":1944,"mtime":1611591751195,"results":"12","hashOfConfig":"11"},{"size":612,"mtime":1610490135172,"results":"13","hashOfConfig":"11"},{"size":500,"mtime":1610481990388,"results":"14","hashOfConfig":"11"},{"size":846,"mtime":1611595297491,"results":"15","hashOfConfig":"11"},{"size":425,"mtime":1610481990388,"results":"16","hashOfConfig":"11"},{"size":1112,"mtime":1611176372603,"results":"17","hashOfConfig":"11"},{"size":5923,"mtime":1611689500352,"results":"18","hashOfConfig":"11"},{"size":5172,"mtime":1611611014120,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ngxqwe",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},"/home/lmv/Desktop/coding/quizapp/src/App.tsx",["42"],"/home/lmv/Desktop/coding/quizapp/src/pages/Home.tsx",["43","44"],"/home/lmv/Desktop/coding/quizapp/src/components/Navbar.tsx",["45"],"import React from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    navMain: {\n      backgroundColor: \"#8A20ED\",\n    },\n  })\n);\n\nexport const Navbar: React.FC = ({}) => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\" className={classes.navMain}>\n      <Toolbar>\n        <Typography variant=\"h6\">TV</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","/home/lmv/Desktop/coding/quizapp/src/index.tsx",[],["46","47"],"/home/lmv/Desktop/coding/quizapp/src/components/Footer.tsx",["48"],"/home/lmv/Desktop/coding/quizapp/src/reportWebVitals.ts",[],"/home/lmv/Desktop/coding/quizapp/src/components/QuestionRandomizer.tsx",["49","50","51","52","53"],"import React, { useState } from \"react\";\nimport { Formik, FormikHelpers, FormikProps, Form, Field } from \"formik\";\n\ninterface QuestionRandomizerProps {\n  incorrectAnswers: Array<string>;\n  correctAnswer: string;\n}\n\nexport const QuestionRandomizer: React.FC<QuestionRandomizerProps> = ({\n  incorrectAnswers,\n  correctAnswer,\n}) => {\n  const combineAndRandomizeAnswers = (\n    incorrectAnswers: Array<string>,\n    correctAnswer: string\n  ) => {\n    let allAnswers: Array<string> = [...incorrectAnswers, correctAnswer];\n    for (let i = allAnswers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n    }\n    return allAnswers;\n  };\n  return (\n    <div>\n      {combineAndRandomizeAnswers(incorrectAnswers, correctAnswer).map(\n        (answer, index) => (\n          <div role=\"group\" aria-labelledby=\"radioGroup\" key={index}>\n            <label>\n              <Field type=\"radio\" value={answer} name=\"playerAnswer\" />\n              {answer}\n            </label>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n","/home/lmv/Desktop/coding/quizapp/src/components/TriviaParameterChoice.tsx",[],"/home/lmv/Desktop/coding/quizapp/src/components/TriviaQuestions.tsx",["54"],"import React, { useState } from \"react\";\nimport { Formik, Form, Field, FieldProps } from \"formik\";\nimport { TriviaData } from \"../pages/Home\";\nimport {\n  Button,\n  createStyles,\n  makeStyles,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport \"../index.css\";\n\ninterface TriviaQuestionsProps {\n  triviaData: TriviaData[];\n  setDataRecieved: Function;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    triviaForm: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \" space-evenly\",\n    },\n    submitButton: {\n      fontSize: \"1.2em\",\n      alignSelf: \"center\",\n      marginTop: \"1em\",\n      width: \"10em\",\n      color: \"white\",\n      borderRadius: \"2.5em\",\n      backgroundColor: \"#8A20ED\",\n      \"&:hover\": {\n        backgroundColor: \"#601BA1\",\n      },\n    },\n    answersBlock: {\n      marginTop: \"1.5em\",\n      marginBottom: \"1.5em\",\n      \"& input[type=radio]\": {\n        opacity: \"0\",\n        position: \"fixed\",\n        width: \"0\",\n      },\n      \"& label\": {\n        color: \"white\",\n        display: \"inline-block\",\n        backgroundColor: \"#8A20ED\",\n        padding: \"10px 20px\",\n        fontFamily: \"sans-serif, Arial\",\n        fontSize: \"16px\",\n        borderRadius: \"2em\",\n      },\n      \"& input[type=radio]:checked + label\": {\n        backgroundColor: \"#601BA1\",\n      },\n\n      \"& label:hover\": {\n        backgroundColor: \"#601BA1\",\n        cursor: \"pointer\",\n      },\n    },\n    questionTypography: {\n      fontSize: \"1em\",\n    },\n  })\n);\nexport const TriviaQuestions: React.FC<TriviaQuestionsProps> = ({\n  triviaData,\n  setDataRecieved,\n}) => {\n  const classes = useStyles();\n  const [corrected, setCorrected] = useState(false);\n  const [correctOrWrong, setCorrectOrWrong] = useState<boolean[]>([]);\n  const combineAndRandomizeAnswers = (\n    incorrectAnswers: Array<string>,\n    correctAnswer: string\n  ) => {\n    let allAnswers: Array<string> = [...incorrectAnswers, correctAnswer];\n    for (let i = allAnswers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [allAnswers[i], allAnswers[j]] = [allAnswers[j], allAnswers[i]];\n    }\n    return allAnswers;\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        questions: [],\n      }}\n      onSubmit={(values) => {\n        const answersArray: Array<boolean> = [];\n        const testAnswers = (data: TriviaData[]) => {\n          for (let i = 0; i < 10; i++) {\n            if (values.questions[i] === data[i].correct_answer) {\n              answersArray.push(true);\n            } else {\n              answersArray.push(false);\n            }\n            setCorrectOrWrong(answersArray);\n          }\n        };\n        console.log(correctOrWrong);\n        console.log(values);\n        testAnswers(triviaData);\n        setCorrected(true);\n      }}\n    >\n      <Form className={classes.triviaForm}>\n        {triviaData.map((data, indexQuestion) => (\n          <div key={indexQuestion}>\n            <Typography\n              variant=\"overline\"\n              className={classes.questionTypography}\n            >\n              {atob(data.question)}\n            </Typography>\n            <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"baseline\"\n              spacing={1}\n            >\n              {combineAndRandomizeAnswers(\n                data.incorrect_answers,\n                data.correct_answer\n              ).map((answer, indexAnswer) => (\n                <div\n                  role=\"group\"\n                  aria-labelledby=\"radioGroup\"\n                  key={indexAnswer}\n                  className={classes.answersBlock}\n                >\n                  <Grid item xs>\n                    <Field\n                      disabled={corrected ? true : false}\n                      type=\"radio\"\n                      value={answer}\n                      name={`questions.${indexQuestion}`}\n                      key={indexAnswer}\n                      id={`${answer}${indexQuestion}`}\n                    />\n                    <label htmlFor={`${answer}${indexQuestion}`}>\n                      {atob(answer)}\n                    </label>\n                  </Grid>\n                </div>\n              ))}\n            </Grid>\n\n            {!corrected\n              ? null\n              : [\n                  correctOrWrong[indexQuestion] ? (\n                    <Alert severity=\"success\">\n                      {atob(data.correct_answer)} is the correct answer!\n                    </Alert>\n                  ) : (\n                    <Alert severity=\"error\">\n                      Wrong, the correct answer was {atob(data.correct_answer)}\n                    </Alert>\n                  ),\n                ]}\n          </div>\n        ))}\n        {!corrected ? (\n          <Button type=\"submit\" className={classes.submitButton}>\n            Submit\n          </Button>\n        ) : (\n          <Button\n            className={classes.submitButton}\n            onClick={() => setDataRecieved(false)}\n          >\n            Generate new trivia\n          </Button>\n        )}\n      </Form>\n    </Formik>\n  );\n};\n",{"ruleId":"55","severity":1,"message":"56","line":2,"column":50,"nodeType":"57","messageId":"58","endLine":2,"endColumn":54},{"ruleId":"55","severity":1,"message":"59","line":6,"column":3,"nodeType":"57","messageId":"58","endLine":6,"endColumn":9},{"ruleId":"60","severity":1,"message":"61","line":45,"column":32,"nodeType":"62","messageId":"63","endLine":45,"endColumn":34},{"ruleId":"60","severity":1,"message":"61","line":15,"column":34,"nodeType":"62","messageId":"63","endLine":15,"endColumn":36},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"60","severity":1,"message":"61","line":19,"column":34,"nodeType":"62","messageId":"63","endLine":19,"endColumn":36},{"ruleId":"55","severity":1,"message":"68","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":25},{"ruleId":"55","severity":1,"message":"69","line":2,"column":10,"nodeType":"57","messageId":"58","endLine":2,"endColumn":16},{"ruleId":"55","severity":1,"message":"70","line":2,"column":18,"nodeType":"57","messageId":"58","endLine":2,"endColumn":31},{"ruleId":"55","severity":1,"message":"71","line":2,"column":33,"nodeType":"57","messageId":"58","endLine":2,"endColumn":44},{"ruleId":"55","severity":1,"message":"72","line":2,"column":46,"nodeType":"57","messageId":"58","endLine":2,"endColumn":50},{"ruleId":"55","severity":1,"message":"73","line":2,"column":31,"nodeType":"57","messageId":"58","endLine":2,"endColumn":41},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"'useState' is defined but never used.","'Formik' is defined but never used.","'FormikHelpers' is defined but never used.","'FormikProps' is defined but never used.","'Form' is defined but never used.","'FieldProps' is defined but never used.","no-global-assign","no-unsafe-negation"]